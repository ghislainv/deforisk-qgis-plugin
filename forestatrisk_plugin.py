# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ForestatriskPlugin
                                 A QGIS plugin
 Deforestation risk mapping.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-12-13
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Ghislain Vieilledent (Cirad)
        email                : ghislain.vieilledent@cirad.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import subprocess
import platform
import time

from qgis.core import Qgis, QgsApplication

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

# Import the forestatrisk package
import forestatrisk as far

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .forestatrisk_plugin_dialog import ForestatriskPluginDialog

# Local far functions
from .far_functions import (
    FarGetVariablesTask,
    FarSampleObsTask,
    FarModelsTask,
    FarPredictTask,
    FarValidateTask,
    combine_model_results,
    FarEmptyTask,
)

# Local rmj function
from .rmj_functions import RmjCalibrateTask

class ForestatriskPlugin:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # Initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # Initialize locale
        locale = QSettings().value("locale/userLocale")[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            "i18n",
            f"ForestatriskPlugin_{locale}.qm")

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr("&Forestatrisk Plugin")
        self.args = None  # GV: arguments for far functions.

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        self.dlg = None

        # Task manager
        self.tm = QgsApplication.taskManager()

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate("ForestatriskPlugin", message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ":/plugins/foo/bar.png") or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ":/plugins/forestatrisk_plugin/icon.png"
        self.add_action(
            icon_path,
            text=self.tr("Modelling and forecasting deforestation "
                         "in the tropics"),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr("&Forestatrisk Plugin"),
                action)
            self.iface.removeToolBarIcon(action)

    def print_dependency_version(self):
        """Print package versions."""
        # Rclone info
        cmd = ["rclone", "--version"]
        result = subprocess.run(cmd, capture_output=True, check=True)
        result = result.stdout.splitlines()
        print(result[0].decode())
        # osmconvert info
        cmd = ["osmconvert", "--help"]
        result = subprocess.run(cmd, capture_output=True, check=True)
        result = result.stdout.splitlines()
        print(result[1].decode())
        # osmfilter info
        cmd = ["osmfilter", "--help"]
        result = subprocess.run(cmd, capture_output=True, check=True)
        result = result.stdout.splitlines()
        print(result[1].decode())
        # forestatrisk
        print(f"forestatrisk v{far.__version__}")

    def set_exe_path(self):
        """Add folder with windows executables to PATH."""
        is_win = platform.system() == "Windows"
        is_64bit = "PROGRAMFILES(X86)" in list(os.environ.keys())
        if is_win and is_64bit:
            os.environ["PATH"] += os.pathsep + os.path.join(
                self.plugin_dir,
                "winexe"
            )
        self.print_dependency_version()

    def increment_n_completed_tasks(self):
        """Increment the number of completed tasks."""
        self.n_completed_tasks += 1

    def task_description(self, task_name, model="", date=""):
        """Write down task description."""
        isocode = self.args["isocode"]
        years = self.args["years"]
        years = years.replace(" ", "").replace(",", "_")
        fcc_source = self.args["fcc_source"]
        if task_name in ["Predict", "Validate"]:
            description = (f"{task_name}_{isocode}_"
                           f"{years}_{fcc_source}_"
                           f"{model}_{date}")
        else:
            description = (f"{task_name}_{isocode}_"
                           f"{years}_{fcc_source}")
        return description

    def set_workdir(self, iso, years, fcc_source):
        """Set working directory."""
        years = years.replace(" ", "").replace(",", "_")
        folder_name = f"{iso}_{years}_{fcc_source}"
        if platform.system() == "Windows":
            workdir = os.path.join(os.environ["HOMEDRIVE"],
                                   os.environ["HOMEPATH"],
                                   "far-qgis", folder_name)
        else:
            workdir = os.path.join(os.environ["HOME"],
                                   "far-qgis", folder_name)
        return workdir

    def set_wdpa_key(self, wdpa_key, workdir):
        """Set WDPA key."""
        if wdpa_key == "":
            env_file = os.path.join(workdir, ".env")
            if os.path.isfile(env_file):
                with open(env_file, encoding="utf-8") as file:
                    lines = file.readlines()
                    for line in lines:
                        [key, value_key] = line.split("=")
                        if key == "WDPA_KEY":
                            os.environ[key] = value_key.replace("\"", "")
            else:
                msg = ("No WDPA API key provided "
                       "(either as plugin argument or "
                       "WDPA_KEY in workdir/.env)")
                self.iface.messageBar().pushMessage(
                    "Error", msg,
                    level=Qgis.Critical)
        else:
            os.environ["WDPA_KEY"] = wdpa_key

    def catch_arguments(self):
        """Catch arguments from UI."""
        # Get variables
        workdir = self.dlg.workdir.text()
        iso = self.dlg.isocode.text()
        proj = self.dlg.proj.text()
        years = self.dlg.years.text()
        fcc_source = self.dlg.fcc_source.text()
        perc = self.dlg.perc.text()
        remote_rclone = self.dlg.remote_rclone.text()
        gdrive_folder = self.dlg.gdrive_folder.text()
        wdpa_key = self.dlg.wdpa_key.text()
        # Sample observations
        nsamp = self.dlg.nsamp.text()
        adapt = self.dlg.adapt.isChecked()
        seed = self.dlg.seed.text()
        csize = self.dlg.csize.text()
        # Fit models
        variables = self.dlg.variables.text()
        beta_start = self.dlg.beta_start.text()
        prior_vrho = self.dlg.prior_vrho.text()
        mcmc = self.dlg.mcmc.text()
        varselection = self.dlg.varselection.isChecked()
        # Predict risk
        csize_interp = self.dlg.csize_interp.text()
        model_icar = self.dlg.model_icar.isChecked()
        model_glm = self.dlg.model_glm.isChecked()
        model_rf = self.dlg.model_rf.isChecked()
        # Rmj calibrate
        defor_thresh = float(self.dlg.defor_thresh.text())
        max_dist = int(self.dlg.max_dist.text())
        win_size = int(self.dlg.win_size.text())
        # Default values
        iso = "MTQ" if iso == "" else iso
        proj = "EPSG:5490" if proj == "" else proj
        years = "2000, 2010, 2020" if years == "" else years
        fcc_source = "jrc" if fcc_source == "" else fcc_source
        perc = "50" if perc == "" else int(perc)
        if workdir == "":
            workdir = self.set_workdir(iso, years, fcc_source)
        remote_rclone = "gdrive_gv" if remote_rclone == "" else remote_rclone
        if gdrive_folder == "":
            gdrive_folder = "GEE/GEE-far-qgis-plugin"
        nsamp = 10000 if nsamp == "" else int(nsamp)
        seed = 1234 if seed == "" else int(seed)
        csize = 1 if csize == "" else float(csize)
        self.set_wdpa_key(wdpa_key, workdir)
        # Fit models
        var = ("dist_edge, "
               "dist_road, dist_town, dist_river, "
               "pa, altitude, slope")
        variables = var if variables == "" else variables
        beta_start = -99 if beta_start == "" else float(beta_start)
        prior_vrho = -1 if prior_vrho == "" else int(prior_vrho)
        mcmc = 5000 if mcmc == "" else int((int(mcmc) // 1000) * 1000)
        # Predict risk
        csize_interp = 0.1 if csize_interp == "" else float(csize_interp)
        # Dictionary of arguments for far functions
        self.args = {
            "workdir": workdir, "isocode": iso, "proj": proj,
            "years": years,
            "fcc_source": fcc_source, "perc": perc,
            "remote_rclone": remote_rclone, "gdrive_folder": gdrive_folder,
            "wdpa_key": wdpa_key,
            "nsamp": nsamp, "adapt": adapt, "seed": seed,
            "csize": csize, "variables": variables,
            "beta_start": beta_start, "prior_vrho": prior_vrho,
            "mcmc": mcmc, "varselection": varselection,
            "csize_interp": csize_interp, "model_icar": model_icar,
            "model_glm": model_glm, "model_rf": model_rf,
            "defor_thresh": defor_thresh, "max_dist": max_dist,
            "win_size": win_size}

    def get_variables(self):
        """Get variables."""
        self.catch_arguments()
        description = self.task_description("GetVariables")
        task = FarGetVariablesTask(
            description=description,
            iface=self.iface,
            workdir=self.args["workdir"],
            isocode=self.args["isocode"],
            proj=self.args["proj"],
            fcc_source=self.args["fcc_source"],
            perc=self.args["perc"],
            remote_rclone=self.args["remote_rclone"],
            gdrive_folder=self.args["gdrive_folder"])
        # Add task to task manager
        self.tm.addTask(task)

    def sample_obs(self):
        """Sample observations."""
        self.catch_arguments()
        description = self.task_description("SampleObs")
        task = FarSampleObsTask(
            description=description,
            iface=self.iface,
            workdir=self.args["workdir"],
            proj=self.args["proj"],
            nsamp=self.args["nsamp"],
            adapt=self.args["adapt"],
            seed=self.args["seed"],
            csize=self.args["csize"])
        # Add task to task manager
        self.tm.addTask(task)

    def models(self):
        """Estimate forestatrisk model parameters."""
        self.catch_arguments()
        description = self.task_description("Models")
        task = FarModelsTask(
            description=description,
            iface=self.iface,
            workdir=self.args["workdir"],
            csize=self.args["csize"],
            variables=self.args["variables"],
            beta_start=self.args["beta_start"],
            prior_vrho=self.args["prior_vrho"],
            mcmc=self.args["mcmc"],
            varselection=self.args["varselection"])
        # Add task to task manager
        self.tm.addTask(task)

    def predict(self):
        """Predict deforestation risk."""
        # Catch arguments
        self.catch_arguments()
        run_models = [self.args["model_icar"],
                      self.args["model_glm"],
                      self.args["model_rf"]]
        periods = ["calibration", "validation"]
        models = ["icar", "glm", "rf"]
        # Create tasks with loops on dates and models
        for period in periods:
            date = "t1" if period == "calibration" else "t2"
            for (model, run_model) in zip(models, run_models):
                if run_model:
                    description = self.task_description(
                        "Predict", model, date)
                    task = FarPredictTask(
                        description=description,
                        iface=self.iface,
                        workdir=self.args["workdir"],
                        years=self.args["years"],
                        csize=self.args["csize"],
                        csize_interpolate=self.args["csize_interp"],
                        period=period,
                        model=model)
                    # Add task to task manager
                    self.tm.addTask(task)

    def validate(self):
        """Model validation."""
        # Catch arguments
        self.catch_arguments()
        run_models = [self.args["model_icar"],
                      self.args["model_glm"],
                      self.args["model_rf"]]
        periods = ["calibration", "validation"]
        models = ["icar", "glm", "rf"]
        # Create tasks with loop on periods and models
        description = self.task_description("Validate_all")
        main_task = FarEmptyTask(description)
        for period in periods:
            date = "t1" if period == "calibration" else "t2"
            for (model, run_model) in zip(models, run_models):
                if run_model:
                    description = self.task_description(
                        "Validate", model, date)
                    task = FarValidateTask(
                        description=description,
                        iface=self.iface,
                        workdir=self.args["workdir"],
                        years=self.args["years"],
                        period=period,
                        model=model)
                    main_task.addSubTask(task)
        # Combine model results
        main_task.taskCompleted.connect(
            lambda: combine_model_results(
                self.args["workdir"], run_models))
        # Add first task to task manager
        self.tm.addTask(main_task)

    def rmj_calibrate(self):
        """Risk map with moving window approach for calibration
        period.
        """
        # Catch arguments
        self.catch_arguments()
        description = self.task_description("RmjCalibrate")
        task = RmjCalibrateTask(
            description=description,
            iface=self.iface,
            defor_thresh=self.args["defor_thresh"],
            max_dist=self.args["max_dist"],
            workdir=self.args["workdir"],
            win_size=self.args["win_size"],
            years=self.args["years"])
        # Add task to task manager
        self.tm.addTask(task)

    def run(self):
        """Run method that performs all the real work."""

        # Create the dialog with elements (after translation)
        # and keep reference.
        # Only create GUI ONCE in callback, so that it will only
        # load when the plugin is started
        if self.first_start is True:
            self.first_start = False
            self.dlg = ForestatriskPluginDialog()
            # Set executable path
            self.set_exe_path()

        # Call to functions if buttons ares clicked

        # far models
        self.dlg.run_var.clicked.connect(self.get_variables)
        self.dlg.run_samp.clicked.connect(self.sample_obs)
        self.dlg.run_models.clicked.connect(self.models)
        self.dlg.run_predict.clicked.connect(self.predict)
        self.dlg.run_validation.clicked.connect(self.validate)

        # rmj moving window model
        self.dlg.run_rmj_calibrate.clicked.connect(self.rmj_calibrate)

        # show the dialog
        self.dlg.show()
        result = self.dlg.exec_()
        if result:
            pass

# End of file
